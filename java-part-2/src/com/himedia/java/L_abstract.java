package com.himedia.java;

// * 추상클래스(Abstract class)
// 추상 클래스는 인스턴스화할 수 없는 클래스이다.
// 즉 추상 클래스 자체로 객체를 생성할 수 없으며,
// 반드시 이 클래스를 상속받은 자식 클래스를 통해서만 객체를 생성할 수 있다.
// 추상 클래스는 추상 메서드뿐만 아니라 일반 메서드도 포함할 수 있으며,
// 필드(멤버 변수)를 가질 수도 있다.

// * 추상메서드(Abstract method)
// 추상 메서드는 메서드의 선언만 존재하고, 구현(메서드의 몸체)이 없는 메서드 이다.
// 추상 메서드는 추상 클래스 내에서 정의되며, 이 메서드를 상속받은 자식 클래스는
// 반드시 이 메서드를 오버라이딩하여 구현해야 한다.

// 추상 클래스와 추상 메서드는 주로 상속 관계에서 공통된 동작을 정의하고,
// 하위 클래스에서 구체적인 구현을 제공하도록 강제하는 데 사용된다.

// 요약
// - 추상 클래스 : 인스턴스화할 수 없으며, 공통된 속성이나 메서드를 정의하고,
// 일부 메서드는 자식 클래스에서 구현하도록 강제한다.
// - 추상 메서드 : 선언만 있고, 구현이 없으며, 반드시 자식 클래스에서 오버라이딩되어야 한다.

// 추상 클래스와 추상 메서드를 활용하면 코드의 구조를 더 명확하게 만들고,
// 하위 클래스에서 필수적으로 구현해야할 메서드를 강제함으로써 코드의 일관성을 유지 할 수 있다.

// [단점]
// 1. 상속의 제약
// 단일 상속의 제한 : 자바는 단일 상속만 지원하므로, 한 클래스가 두 개 이상의 추상 클래스를 상속 받을 수 없다.
// 이는 복잡한 다중 상속 구조를 만들고자 할 때 제약이 될 수 있다.

// 2. 구현의 강제성
// 모든 자식 클래스에서 구현 강제 : 추상 메서드를 상속받는 모든 자식 클래스는 해당 메서드를 반드시 구현해야 한다.
// 때로는 모든 자식 클래스에서 동일한 메서드 구현이 필요하지 않을 수 있는데,
// 이런 경우에도 모든 자식 클래스에서 해당 메서들르 구현해야 하는 부담이 있다.
// 불필요한 오버라이딩이 발생할 수 있다.

// 3. 추상 클래스의 유연성 부족
// 추상 클래스의 역할 중첩 :
//	추상 클래스는 주로 공통 기능을 제공하기 위해 사용되지만,
//	때로는 이 공통 기능이 모든 하위 클래스에 적합하지 않을 수 있다.
//	이 경우 추상 클래스가 불필요하게 많은 역할을 담당하게 되어 설계가 복잡해질 수 있다.
// 구현 상속의 어려움 :
//	추상 클래스에서 공통 구현을 제공하는 것은 유용할 수 있지만,
//	이는 동시에 코드 재사용을 강제하여 하위 클래스에서 원하지 않는 동작이 상속될 수도 있다.
//	또한, 공통된 코드가 적절히 분리되지 않으면 추상 클래스의 유지보수가 어려워질 수 있다.


public class L_abstract {
    public static void main(String[] args) {
//        L_animal animal = new L_animal();

        L_animal myDog = new L_dog();
        L_animal myCat = new L_cat();

        myDog.makeSound();
        myCat.makeSound();

        myDog.breathe();
        myCat.breathe();
    }
}
